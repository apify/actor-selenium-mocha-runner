{
  "title": "Run mocha code generated by Selenium IDE.",
  "type": "object",
  "schemaVersion": 1,
  "properties": {
    "seleniumMochaCode": {
      "title": "Selenium mocha code",
      "type": "string",
      "description": "The mocha code generated by Selenium IDE.",
      "editor": "javascript",
      "prefill": "// Generated by Selenium IDE\nconst { Builder, By, Key, until } = require('selenium-webdriver')\nconst assert = require('assert')\nconst chrome = require('selenium-webdriver/chrome');\n\nconst sleep = async (seconds) => new Promise((resolve) => setTimeout(() => resolve(), seconds * 1000));\n\ndescribe('Sign-in/out test', function() {\n  let driver\n  let vars\n  beforeEach(async function() {\n    const chromeOptions = new chrome.Options();\n    chromeOptions.addArguments('--disable-translate');\n    chromeOptions.addArguments('--safebrowsing-disable-auto-update');\n    chromeOptions.addArguments('--headless', '--no-sandbox');\n    driver = await new Builder().forBrowser('chrome');\n    driver.setChromeOptions(chromeOptions)\n    driver = driver.build();\n    vars = {}\n  })\n  afterEach(async function() {\n    await driver.quit();\n  })\n  it('Sign-in/out test', async function() {\n    await driver.get(\"https://console.apify.com/sign-in\")\n    await driver.manage().window().setRect({ width: 943, height: 927 })\n    await sleep(10);\n    await driver.findElement(By.css(\".field_wrapper__StyledField-sc-nfiayc-0:nth-child(1) .text_input__StyledTextInput-sc-1g43ih7-0\")).click()\n    {\n      const element = await driver.findElement(By.css(\"#data-tracking-sign-in-github .SignOAuth-label\"))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n\n    await driver.findElement(By.id(\"email\")).sendKeys(\"marek+test@trunkat.eu\")\n    await driver.findElement(By.id(\"password\")).sendKeys(\"807629abc\")\n    await driver.findElement(By.id(\"data-tracking-sign-in-direct\")).click()\n    await sleep(15);\n    {\n      const element = await driver.findElement(By.css('[tooltip=\"Store\"]'))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\"body\"))\n      await driver.actions({ bridge: true }).move(element, 0, 0).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\".Sidebar-itemWrapper:nth-child(2) div\"))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\"body\"))\n      await driver.actions({ bridge: true }).move(element, 0, 0).perform()\n    }\n    {\n      const element = await driver.findElement(By.css('[tooltip=\"Store\"]'))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\"body\"))\n      await driver.actions({ bridge: true }).move(element, 0, 0).perform()\n    }\n    {\n      const element = await driver.findElement(By.css('[tooltip=\"Home\"]'))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\"body\"))\n      await driver.actions({ bridge: true }).move(element, 0, 0).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\".\\\\_active div\"))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\"body\"))\n      await driver.actions({ bridge: true }).move(element, 0, 0).perform()\n    }\n    {\n      const element = await driver.findElement(By.css('[tooltip=\"Home\"]'))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n    {\n      const element = await driver.findElement(By.css(\"body\"))\n      await driver.actions({ bridge: true }).move(element, 0, 0).perform()\n    }\n    await driver.findElement(By.css('.NavUserPill-avatar')).click();\n    await sleep(1);\n    await driver.findElement(By.id(\"signOut\")).click();\n    {\n      const element = await driver.findElement(By.css('[tooltip=\"Proxy\"]'))\n      await driver.actions({ bridge: true }).move(element).perform()\n    }\n  })\n})\n"
    },
    "mochaTimeoutSecs": {
      "title": "Mocha timeout (seconds)",
      "type": "integer",
      "description": "Timeout in seconds for mocha tests",
      "editor": "number",
      "prefill": 30,
      "minimum": 30,
      "unit": "Seconds"
    }
  },
  "required": ["seleniumMochaCode"]
}
